{"version":3,"sources":["shared/fetchUrl/fetchUrl.ts","book-search/book-search.service.ts","wish-list/WishList.tsx","book-search/BookSearch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchUrl","url","config","fetch","then","response","a","json","data","ok","Promise","reject","getBooksByType","type","method","headers","WishList","props","className","wishlist","map","item","i","key","volumeInfo","title","authors","onClick","removeClick","BookSearch","useState","bookType","updateBookType","updateBookTypeToSearch","allAvailableBooks","setAllAvailableBooks","onwishlistClick","bookData","requestBooks","allBooks","items","useEffect","timer","setTimeout","getAllBooks","clearTimeout","length","onSubmit","e","preventDefault","autoFocus","name","value","placeholder","onChange","target","imageLinks","src","thumbnail","publisher","publishedDate","description","disable","concat","disabled","filter","res","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7a0fd08.chunk.js","sourcesContent":["\n/**\n * Fetch call always resolves even with bad requests (except network error)\n * so adding a wrapper over fetch to reject request if response is not ok\n * Rejected promise can be caught with catch at the calling functions and can be handled\n * @param url\n * @param config\n */\nconst fetchUrl = (url: string, config = {}): Promise<any> =>\n    fetch(url, config).then(async response => {\n        const data = await response.json();\n        return response.ok ? data : Promise.reject(data);\n    });\nexport default fetchUrl;\n","import  fetchUrl from './../shared/fetchUrl/fetchUrl';\n\nexport async function getBooksByType(type: string) {\n    try {\n        return await fetchUrl(`https://www.googleapis.com/books/v1/volumes?q=${type}`, {\n            method: 'GET',\n            headers: {\n                'content-type': 'application/json',\n            }\n        });\n    } catch(exception) {\n        return [];\n\n    }\n}\n\n","import React from \"react\";\n\nconst WishList =(props: any)=>{\n    return(<div className=\"wish-list-container\">\n                <header className=\"header-wishlist\">\n                    <div className=\"header--content wishListTitle\">My Reading Wishlist</div>\n                </header>\n                <div className=\"wishListItems\">  \n                    {props.wishlist.map((item: { volumeInfo: { title: React.ReactNode; authors: React.ReactNode}; },i: number )=>{\n                        return(<div className=\"wish-List-elements\" key={i}>\n                        <p > <strong>{item.volumeInfo.title}</strong> by {item.volumeInfo.authors}</p>\n                        <button className=\"tag-remove\" onClick={()=>props.removeClick(item,i)}></button>\n                    </div>)\n                    })      \n                    }\n                </div>\n            </div>)\n}\n\nexport default WishList;","import React, { useEffect, useState } from \"react\";\nimport { getBooksByType } from \"./book-search.service\";\nimport WishList from '../wish-list/WishList';\n\n\nconst BookSearch = () => {\n    \n    const [bookType, updateBookType] = useState(\"\");\n    const [bookTypeToSearch, updateBookTypeToSearch] = useState(\"\");\n    const [allAvailableBooks, setAllAvailableBooks] = useState([]);\n    const[wishlist,onwishlistClick]= useState([]);\n    const bookData:any=allAvailableBooks;\n    async function requestBooks() {\n        if (bookType) {\n            const allBooks = await getBooksByType(bookType);\n            setAllAvailableBooks(allBooks.items);\n        }else{\n            setAllAvailableBooks([]);\n        }\n    }\n\n    useEffect(() => {\n        const timer = setTimeout(()=>{\n            async function getAllBooks() {\n                await requestBooks();\n            }\n            getAllBooks();\n        },500) \n        return () => clearTimeout(timer);\n    }, [bookType]);\n\n    // useEffect(() => {\n    // }, [allAvailableBooks]);\n\n    useEffect(() => {\n    }, [wishlist]);\n    \n    return (\n\n            <>\n                <div className={wishlist.length > 0 ?\"book--container\":\"book-containerOnly\"}>\n                    <div className=\"search-params\">\n                        <div>\n                            <form\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                   updateBookTypeToSearch(bookType)\n                                }}\n                            >\n                                <input\n                                    className=\"full-width\"\n                                    autoFocus\n                                    name=\"gsearch\"\n                                    type=\"search\"\n                                    value={bookType}\n                                    placeholder=\"Search for books to add to your reading list and press Enter\"\n                                    onChange={(e) =>{\n                                        e.preventDefault();\n                                        updateBookType(e.target.value)\n                                    } }\n                                />\n                            </form>\n                            {!bookType   && (\n                                <div className=\"empty\">\n                                    <p>\n                                        Try searching for a topic, for example\n                                        <a onClick={() => {\n                                                updateBookType(\"Javascript\");\n                                            }}\n                                        >\n                                            {\" \"}\n                                            \"Javascript\"\n                                        </a>\n                                    </p>\n                                </div>\n                            )}{\n                                bookData && <div className=\"list\">\n                               {\n                                    bookData.map((item: any,i: any) =>{\n                                        return(\n                                            <div className={wishlist.length > 0 ?\"list-elements\":\"list-elementsOnly\"}  key={i}>\n                                                {item.volumeInfo.imageLinks? <div className=\"list-image\"><img  src={item.volumeInfo.imageLinks.thumbnail}></img></div>:<div></div>}\n                                               \n                                                <div className=\"list-items\">\n                                                    <p><strong>{item.volumeInfo.title}</strong> by {item.volumeInfo.authors} | {item.volumeInfo.publisher} | {item.volumeInfo.publishedDate}</p>\n                                                    <p className=\"description\">{item.volumeInfo.description}</p>    \n                                                </div>\n                                                <button className=\"wish-button\" onClick={() => {\n                                                                item.disable = true;\n                                                                onwishlistClick(wishlist.concat(item));\n                                                            }} disabled={item.disable}>Add to WishList</button>\n                                            </div>\n                                            )\n                                    })\n                                }\n                            </div>\n                            }     \n                        </div>\n                    </div>\n                </div>{\n                    wishlist.length > 0 ?<WishList wishlist = {wishlist} removeClick={(item: any,i:number)=>{item.disable = !item.disable;\n                        onwishlistClick(wishlist.filter(res=> res !== item))}}/>  : <div></div>\n                }\n                \n            </>\n    );\n};\n\nexport default BookSearch;\n","import React from 'react';\nimport './styles/App.scss';\nimport BookSearch from './book-search/BookSearch';\n\n\nfunction App() {\n  return (\n      <div>\n        <header className=\"header\">\n          <div className=\"header--content\">\n            <h1>My Good Reads</h1>\n          </div>\n        </header>\n        <main>\n          <BookSearch/>\n          \n        </main>\n       \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}